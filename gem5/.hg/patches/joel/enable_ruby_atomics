# HG changeset patch
# Parent 194de81bc8849c9979eeb758577e86ca5c4168f2
# User Joel Hestness <jthestness@gmail.com>
Ruby: Enable GPU-like atomic data updates

To support GPU-like atomic data updates, Ruby needs to differentiate GPU atomic
memory accesses in the RubyPort and Sequencer, and the RubyPort needs to call
out to separate functionality in gem5-gpu that is capable of completing the
memory accesses and associated atomic operations.
* * *
Updated to how atomics are handled.
will be folded into atomic patch

diff -r 194de81bc884 src/mem/ruby/system/RubyPort.cc
--- a/src/mem/ruby/system/RubyPort.cc	Fri Aug 21 13:56:21 2015 -0500
+++ b/src/mem/ruby/system/RubyPort.cc	Fri Aug 21 13:57:03 2015 -0500
@@ -43,6 +43,7 @@
 #include "debug/Config.hh"
 #include "debug/Drain.hh"
 #include "debug/Ruby.hh"
+#include "gpu/atomic_operations.hh"
 #include "mem/protocol/AccessPermission.hh"
 #include "mem/ruby/slicc_interface/AbstractController.hh"
 #include "mem/ruby/system/RubyPort.hh"
@@ -460,7 +461,14 @@
     RubyPort *ruby_port = static_cast<RubyPort *>(&owner);
     RubySystem *rs = ruby_port->m_ruby_system;
     if (accessPhysMem) {
-        rs->getPhysMem()->access(pkt);
+        if (pkt->req->isSwap() && pkt->req->isLockedRMW() && pkt->isRead() &&
+            pkt->isWrite()) {
+            // Perform the packet's atomic operations on physical memory
+            AtomicOpRequest::atomicMemoryAccess(pkt, rs->getPhysMem());
+        } else {
+            rs->getPhysMem()->access(pkt);
+        }
+
     } else if (needsResponse) {
         pkt->makeResponse();
     }
diff -r 194de81bc884 src/mem/ruby/system/Sequencer.cc
--- a/src/mem/ruby/system/Sequencer.cc	Fri Aug 21 13:56:21 2015 -0500
+++ b/src/mem/ruby/system/Sequencer.cc	Fri Aug 21 13:57:03 2015 -0500
@@ -633,6 +633,16 @@
             primary_type = RubyRequestType_Locked_RMW_Read;
         }
         secondary_type = RubyRequestType_ST;
+
+        if (pkt->req->isSwap()) {
+            //
+            // This is an atomic swap for GPU atomics from gem5-gpu.
+            // Re-set the secondary_type to be atomic
+            //
+            assert(pkt->isRead() && pkt->isWrite());
+            assert(primary_type == RubyRequestType_Locked_RMW_Write);
+            secondary_type = RubyRequestType_ATOMIC;
+        }
     } else {
         if (pkt->isRead()) {
             if (pkt->req->isInstFetch()) {
